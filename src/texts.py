start_text = 'The art gallery problem asks how many cameras are needed to guard the<br>entirety of an arbitrary gallery. This plot models the gallery as a<br>polygon and animates the discovery of a lower bound for this quantity.<br><br>Select a step below to see the animation!<br><br><br><br><br>O problema da galeria de arte busca quantas câmeras são<br>necessárias para vigiar totalmente uma galeria arbitrária.<br>Esse gráfico modela a galeria como um polígono e anima<br>a descoberta de um limite inferior para essa quantidade.<br><br>Selecione um dos passos abaixo para ver a animação!'

bp_text = 'A polygon is a set of n points and n edges, such that no pair of edges<br>cross each other. Given a list of points (in counter-clockwise order),<br>the polygon is constructed by uniting consecutive points. This step<br>completes the modeling the gallery layout as viewed from above.<br><br><br><br><br>Um polígono é um conjunto de n pontos e n arestas, tal que nenhum<br>par de arestas se cruza. Dada uma lista de pontos (em sentido<br>anti-horário), o polígono é construído unindo pontos consecutivos.<br>Esse passo completa a modelagem da galeria vista de cima.'

ec_text = 'The ear-clipping algorithm is used to determine a triangulation of the<br>given polygon. An ear is a triangle, formed by three consecutive<br>vertices of a polygon, that doesn\'t contain any other vertices inside<br>it (or on its edges). After an ear is found, its middle point is<br>"removed" from the polygon and we then turn our attention to this<br>new  "sub-polygon". This process repeats until the sub-polygon<br>contains only three vertices, which form the final ear.<br>In the end, the ears form the triangulation.<br><br><br><br><br>O algoritmo corte-de-orelhas é usado para determinar a triangulação<br>do polígono dado. Uma orelha é um triângulo, formado por três vértices<br>consecutivos de um polígono, que não contém nenhum outro vértice<br>dentro dele (ou em suas arestas). Após descobrir uma orelha, "remove-se"<br>o ponto do meio do polígono e viramos a atenção para esse novo<br>"sub-polígono". Esse processo é repetido até que o sub-polígono<br>contenha apenas três vértices, que formam a última<br>orelha. Ao final, as orelhas formam a triangulação.'

tc_text = 'A 3-coloring of a graph is a way to color (mark) its vertices with 3<br>different colors, in a way that adjacent vertices don\'t share the<br>same color. With the triangulation done, a 3-coloring is always possible<br>in the resulting graph. Using a depth-first search (DFS), we can traverse<br>the triangles from neighbor to neighbor, where two triangles are<br>neighbors if they share an edge. Due to the nature of this graph, there<br>are already two colored vertices when visiting a triangle, aside from the<br>first one. After the graph is colored, we can interpret each color as<br>a set of cameras. Each of these sets sees every triangle, since there<br>is one vertice of that color in every triangle, so these cameras view<br>the entire polygon. That way, the smallest color set<br>has at most ⌊n/3⌋ cameras, an upper bound.<br><br><br>Uma 3-coloração de um grafo é uma forma de colorir (marcar) seus<br>vértices com 3 cores diferentes, de forma que vértices adjacentes não<br>possuem a mesma cor. Com a triangulação feita, uma 3-coloração é sempre<br>possível no grafo resultante. Usando uma busca em profundidade (DFS),<br>podemos percorrer o grafo de vizinho a vizinho, onde dois triângulos<br>são ditos vizinhos se compartilham uma aresta. Devido à natureza desse<br>grafo, já existem dois vértices coloridos ao visitar um triângulo,<br>exceto pelo primeiro. Após colorir o grafo, podemos interpretar cada cor<br>como um conjunto de câmeras. Cada um desses conjuntos vê todos os<br>triângulos, já que existe um vértice de cada cor em cada triângulo,<br>então essas câmeras vêem o polígono inteiro. Com isso, o menor<br>conjunto possui no máximo ⌊n/3⌋ câmeras, um limite superior.'

ms_text = 'Given a camera set, chances are that some of the cameras can be removed<br>and the gallery is still entirely guarded. By checking the possible<br>subsets on all three camera sets, we can determine a lower bound and<br>see which subsets use this amount. The animation shows these subsets and,<br>one camera at a time, which edges they can guard completely. If the goal<br>is to simply determine a lower bound, the triangulation and 3-coloring<br>are unnecessary, but they greatly reduce how many subsets<br>need to be checked. In technical terms, the time complexity<br>is greatly reduced, from O(2^n) to O(2^(n/3)).<br><br><br><br>Dado um conjunto de câmeras, é provável que algumas das câmeras possam<br>ser removidas e que a galeria continue sendo totalmente vigiada.<br>Ao checar os subconjuntos possíveis de todos os três conjuntos de câmeras,<br>podemos determinar um limite inferior e ver quais subconjuntos usam essa<br>quantidade. A animação mostra esses subconjuntos e, uma câmera por vez,<br>quais arestas ela vigiam completamente. Se o objetivo é simplesmente<br>determinar o limite inferior, a triângulação e a 3-coloração são<br>desnecessárias, mas elas reduzem drasticamente a quantidade de<br>subconjuntos a serem checados. Em termos técnicos, a complexidade<br>de tempo é reduzida drasticamente, de O(2^n) para O(2^(n/3)).'